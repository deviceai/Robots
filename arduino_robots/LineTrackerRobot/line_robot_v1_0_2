//MOTORS
//LEFT MOTOR:
#define MOT_L1   11   //PWM PIN IN1 
#define MOT_L2   3    //PWM PIN IN2 (SPEED LEFT)
//RIGHT MOTOR:
#define MOT_R1   10   //PWM PIN IN3 
#define MOT_R2    9   //PWM PIN IN4 (SPEED RIGHT)
//SENSORS
#define SS1_PIN 12
#define SS2_PIN 8
#define SS4_PIN 4
#define SS5_PIN 2
//SPEED
#define SPEED    255
//slow_left/slow_right
#define K1S 10
#define K1B 1.1
//left/right
#define K2S 10
#define K2B 1.2

#define STATE_FORWARD    0
#define STATE_RIGHT      1
#define STATE_LEFT       2
#define STATE_SLOW_RIGHT 3
#define STATE_SLOW_LEFT 4

int state = STATE_FORWARD;

void setup() {
 pinMode(3, OUTPUT);
 pinMode(9, OUTPUT);
 pinMode(10, OUTPUT);
 pinMode(11, OUTPUT);
 delay(1000);
 motors_forward();
 
}

void loop() {
    // Наш робот ездит по белому полю с чёрным треком. В обратном случае не нужно
    // инвертировать значения с датчиков  
    boolean SS1 = !digitalRead(SS1_PIN);
    boolean SS2 = !digitalRead(SS2_PIN);
    boolean SS4 = !digitalRead(SS4_PIN);
    boolean SS5 = !digitalRead(SS5_PIN);
    
        // В какое состояние нужно перейти?
    int targetState;
    
    if (SS1 == SS5 && SS2 == SS4){
        // под сенсорами всё белое или всё чёрное то едем вперёд
      targetState = STATE_FORWARD;       } 
    if (SS2 != SS5){
      targetState = STATE_SLOW_LEFT;       } 
    if (SS1 != SS5){
      targetState = STATE_LEFT;       }
    if (SS4 != SS1){
      targetState = STATE_SLOW_RIGHT;       }
    if (SS5 != SS1){
      targetState = STATE_RIGHT;       }

   
    if (state == targetState) {
        // мы уже делаём всё что нужно,
        // делаем измерения заново
        return;
    }
       switch (targetState) {
        case STATE_FORWARD:
            motors_forward();
            break;
        case STATE_SLOW_LEFT:
            steerSlowLeft();
            break;
        case STATE_LEFT:
            steerLeft();
            break;
        case STATE_SLOW_RIGHT:
            steerSlowRight();
            break;
        case STATE_RIGHT:
            steerLeft();
            break;
    }

    // не позволяем сильно вилять на прямой
    delay(20);

}


//BOTH MOTORS FUNCTIONS
void motors_forward(){
  state = STATE_FORWARD;
  analogWrite(MOT_L2, 200);
  analogWrite(MOT_R2, 200);
  digitalWrite(MOT_L1, 0);
  digitalWrite(MOT_R1, 0);
}
void steerSlowLeft() 
{
    state = STATE_SLOW_LEFT;

    analogWrite(MOT_L2, SPEED/K1S);
    analogWrite(MOT_R2, SPEED/K1B);

    digitalWrite(MOT_R1, 0);
    digitalWrite(MOT_L1, 0);
}
void steerLeft() 
{
    state = STATE_LEFT;

    analogWrite(MOT_L2, SPEED/K2S);
    analogWrite(MOT_R2, SPEED/K2B);

    digitalWrite(MOT_R1, 0);
    digitalWrite(MOT_L1, 0);
}
void steerSlowRight() 
{
    state = STATE_SLOW_RIGHT;

    // Замедляем правое колесо относительно левого,
    // чтобы начать поворот
    analogWrite(MOT_R2, SPEED/K1S);
    analogWrite(MOT_L2, SPEED/K1B);

    digitalWrite(MOT_R1, 0);
    digitalWrite(MOT_L1, 0);
}
void steerRight() 
{
    state = STATE_RIGHT;

    // Замедляем правое колесо относительно левого,
    // чтобы начать поворот
    analogWrite(MOT_R2, SPEED/K2S);
    analogWrite(MOT_L2, SPEED/K2B);

    digitalWrite(MOT_R1, 0);
    digitalWrite(MOT_L1, 0);
}

  
